services:
  # NGINX
  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - microservices-net
    depends_on:
      - api-gateway

  # PROMETHEUS
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices-net

  # GRAFANA
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - microservices-net

  # ELK STACK
  elasticsearch:
    image: elasticsearch:8.15.2
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xms512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - microservices-net

  logstash:
    image: logstash:8.15.2
    container_name: logstash
    environment:
      LS_JAVA_OPTS: "-Xmx256m  -Xms256m"
    ports:
      - "5000:5000/tcp"
      - "9600:9600"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9600/_node/pipelines || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s
    networks:
      - microservices-net
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: kibana:8.15.2
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    ports:
      - "5601:5601"
    networks:
      - microservices-net
    depends_on:
      elasticsearch:
        condition: service_healthy

  # REDIS
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6380:6380"
    volumes:
      - ./redis:/data
    command: --port 6380
    networks:
      - microservices-net
    restart: always

  # RABBITMQ
  rabbitmq:
    image: rabbitmq:alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
    networks:
      - microservices-net
    restart: always

  # ZIPKIN
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  # POSTGRES DATABASES
  postgres-auth:
    image: postgres:alpine
    container_name: postgres-auth
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth-service
    ports:
      - "5433:5433"
    command: -p 5433
    networks:
      - microservices-net
    restart: always

  postgres-user:
    image: postgres:alpine
    container_name: postgres-user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user-management-service
    ports:
      - "5434:5434"
    command: -p 5434
    networks:
      - microservices-net
    restart: always

  postgres-patient:
    image: postgres:alpine
    container_name: postgres-patient
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: patient-service
    ports:
      - "5435:5435"
    command: -p 5435
    networks:
      - microservices-net
    restart: always

  postgres-report:
    image: postgres:alpine
    container_name: postgres-report
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: report-service
    ports:
      - "5436:5436"
    command: -p 5436
    networks:
      - microservices-net
    restart: always

  # MAIN SERVICES
  config-server:
    container_name: config-server
    image: omerasafbalikci/config-server:latest
    ports:
      - "8888:8888"
    volumes:
      - ./logs:/logs
    environment:
      - SPRING_PROFILES_ACTIVE=native
    networks:
      - microservices-net

  discovery-server:
    container_name: discovery-server
    image: omerasafbalikci/discovery-server:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8761:8761"
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      config-server:
        condition: service_started
      logstash:
        condition: service_healthy
      zipkin:
        condition: service_started

  api-gateway:
    container_name: api-gateway
    image: omerasafbalikci/api-gateway:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8080"
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      discovery-server:
        condition: service_started
      redis:
        condition: service_started

  auth-service:
    container_name: auth-service
    image: omerasafbalikci/auth-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      api-gateway:
        condition: service_started
      rabbitmq:
        condition: service_started
      postgres-auth:
        condition: service_started

  user-service:
    container_name: user-service
    image: omerasafbalikci/user-management-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      api-gateway:
        condition: service_started
      auth-service:
        condition: service_started
      postgres-user:
        condition: service_started

  patient-service:
    container_name: patient-service
    image: omerasafbalikci/patient-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      postgres-patient:
        condition: service_started
      api-gateway:
        condition: service_started

  report-service:
    container_name: report-service
    image: omerasafbalikci/report-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./logs:/logs
    networks:
      - microservices-net
    depends_on:
      postgres-report:
        condition: service_started
      patient-service:
        condition: service_started
      api-gateway:
        condition: service_started

networks:
  microservices-net:
    driver: bridge